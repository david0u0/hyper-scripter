# frozen_string_literal: true

# [HS_HELP]: Create git commit for hyper-scripter home.
# [HS_HELP]:
# [HS_HELP]: The commit message is auto-generated by date and hyper-scripter home
# [HS_HELP]: e.g. [Auto Commit 2022-11-30 (my_scripts)]
# [HS_HELP]: You can modify this message so that the commit is not treated as auto-generated
# [HS_HELP]: All continuous auto-generated commit with same message will be merged (using --amend)
# [HS_HELP]:
# [HS_HELP]: USAGE:
# [HS_HELP]:     hs commit

require_relative './common'

REAL_HS_HOME = File.realpath(HS_ENV.home)
Dir.chdir(REAL_HS_HOME)
GIT_HOME = run_cmd('git rev-parse --show-toplevel').chop
Dir.chdir(GIT_HOME)

# Check if diverge
system('git fetch --all', exception: true)
rev_list = run_cmd('git rev-list origin..HEAD').chop
unless rev_list.empty?
  warn "branch is diverged!"
  exit 1
end

# Check if other files are dirty
Dir.foreach(GIT_HOME) do |f|
  next if ['.', '..', '.git'].include?(f)
  next if File.identical?(REAL_HS_HOME, f)

  status = run_cmd("git status #{f} --porcelain")
  unless status.empty?
    warn "#{f} is not clean:"
    warn status
    exit 1
  end
end

# Check if remote had changed
system('git add -A', exception: true)
system('git stash', exception: true)
diff = run_cmd("git diff --stat origin/master #{REAL_HS_HOME}").chop
unless diff.empty?
  warn "remote home had changed!"
  warn diff
  system('git stash pop', exception: true)
  exit 1
end

# prepare the files
system('git pull', exception: true)
system('git stash pop', exception: true)

# create the commit
last_commit_msg = run_cmd("git log --pretty=format:'%s' --max-count 1")

date = Time.now.utc
date_str = date.strftime('%Y-%m-%d')
msg = "[Auto Commit #{date_str} (#{File.basename(REAL_HS_HOME)})]"

system('git add -A', exception: true)
if last_commit_msg.start_with?(msg)
  warn 'Amend the last commit'
else
  warn 'Create new commit'
  system("git commit -m '#{msg}'", exception: true)
end

system('git commit --amend', exception: true)
